# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""user_tokens"""
type UserToken {
  id: ID!
  user: User!
  token: String!
  refreshToken: String!
  expireAt: String!
  refreshExpireAt: String!
  version: Int!

  """0: ADMIN | 1: STUDENT | 2: LECTURE"""
  role: Int!
}

"""answer_images"""
type AnswerImage {
  id: ID!
  name: String!
  answer: [Answer!]!
}

"""user_answer_actions"""
type UserAnswerAction {
  """0: NOTHING | 1: LIKE | 2: DISLIKE"""
  actionType: Int!
  answer: Answer!
  user: User!
}

"""answers"""
type Answer {
  id: ID!
  content: String!
  count: Int!
  documentLink: String!

  """0: NOTHING | 1: WRONG | 2: CORRECT"""
  isCorrectAnswer: Int!

  """0: FALSE | 1: TRUE"""
  isHidden: Int!
  images: [AnswerImage!]!
  user: User!
  actions: [UserAnswerAction!]!
  parentAnswer: Answer!
  question: Question!
}

"""question_images"""
type QuestionImage {
  id: ID!
  name: String!
  question: [Question!]!
}

"""tags"""
type Tag {
  id: ID!
  name: String!
  logo: String!
  description: String!

  """0: FALSE | 1: TRUE"""
  isHidden: Int!
}

"""question_tags"""
type QuestionTag {
  id: ID!
  tag: Tag!
}

"""questions"""
type Question {
  id: ID!
  title: String!
  content: String!
  count: Int!
  githubLink: String!

  """0: FALSE | 1: TRUE"""
  isHidden: Int!
  user: User!
  tags: [QuestionTag!]!
  images: [QuestionImage!]!
  actions: [UserQuestionAction!]!
  answers: [Answer!]!
}

"""user_question_actions"""
type UserQuestionAction {
  """0: NOTHING | 1: LIKE | 2: DISLIKE"""
  actionType: Int!
  question: Question!
  user: User!
}

"""Images"""
type Image {
  id: ID!
  name: String!
  alt: String!
  description: String!
  blurHash: String!
  urlLink: String!
  user: User!
}

"""group_attendances"""
type GroupAttendance {
  id: ID!
  time: String!

  """0: ONLINE | 1: AWAY | 2: DO NOT DISTURB | 3: OFFLINE"""
  status: String!

  """Using image or video uuid"""
  evidence: String!
  member: GroupMember!
  group: Group!
}

"""group_board_histories"""
type GroupBoardHistory {
  id: ID!

  """
  0: CREATE_COLUMN | 1: DROP_COLUMN | 2: ADD_NEW_CARD_TO_COLUMN | 3: DROP_CARD_FROM_COLUMN | 4: MOVE_CARD_FROM_COLUMN_TO_COLUMN | 5: ASSIGN_MEMBER_TO_CARD | 6: UNASSIGN_MEMBER_FROM_CARD | 7: FINISH_ASSIGNED_TASK_FROM_CARD
  """
  type: Int!
  columnName: String
  cardName: String
  fromColumn: String
  toColumn: String
  fromCard: String
  toCard: String
  assigneeId: String
  board: GroupBoard!
  member: GroupMember!
}

"""group_cards"""
type GroupCard {
  id: ID!
  title: String!
  content: String!
  tag: String!
  thumbnail: String!
  order: Int!

  """0: NONE | 1: FAVORITED"""
  isFavorite: String!
  column: GroupColumn!
}

"""group_columns"""
type GroupColumn {
  id: ID!
  title: String!
  order: Int!
  board: GroupBoard!
  cards: GroupCard
}

"""group_boards"""
type GroupBoard {
  id: ID!
  title: String!
  color: String!
  group: Group!
  columns: GroupColumn
  histories: GroupBoardHistory!
}

"""group_events"""
type GroupEvent {
  id: ID!
  name: String!
  description: String!
  meetingUrl: String!
  startTime: String!
  endTime: String!

  """0: FALSE | 1: TRUE -> DEFAULT: FALSE"""
  isHidden: Int!

  """0: EVENT | 1: TODO | 2: ANNOUCEMENT -> DEFAULT: EVENT"""
  type: Int!
  color: String!
  group: Group!
  member: GroupMember!
}

"""group_notes"""
type GroupNote {
  id: ID!
  title: String!
  content: String!
  category: String!
  color: String!

  """0: FALSE | 1: TRUE -> DEFAULT: FALSE"""
  isHidden: String!
  group: Group!
  member: GroupMember!
}

"""group_quick_answers"""
type GroupQuickAnswer {
  id: ID!
  responseNickname: String!
  answer: String!
  question: GroupQuickQuestion!
}

"""group_quick_questions"""
type GroupQuickQuestion {
  id: ID!
  title: String!
  startTime: String!
  endTime: String!
  note: String!

  """0: NO NAME REQUIRED | 1: NAME REQUIRED -> DEFAULT: 0"""
  type: String!

  """0: FALSE | 1: TRUE -> DEFAULT: 0"""
  isHidden: Int!
  group: Group!
  answers: GroupQuickAnswer!
}

"""groups"""
type Group {
  id: ID!
  name: String!
  imageUrl: String
  logo: String!
  qrCode: String
  inviteCode: String
  meetingLink: String!
  subMeetingLink: String
  users: GroupMember!
  attendances: GroupAttendance!
  boards: GroupBoard!
  notes: GroupNote!
  events: GroupEvent!
  quickQuestions: GroupQuickQuestion!
}

"""group_members"""
type GroupMember {
  id: ID!
  joinDate: String!
  outDate: String

  """0: ADMIN | 1: SUBADMIN | 2: MEMBER"""
  role: Int!
  user: User!
  group: Group!
  attendances: GroupAttendance!
  events: GroupEvent!
  notes: GroupNote!
  histories: GroupBoardHistory!
}

"""users"""
type User {
  id: ID!
  fullName: String!
  email: String!
  password: String!
  avatar: String
  banner: String
  phoneNumber: String
  description: String

  """0: ADMIN | 1: STUDENT | 2: LECTURE"""
  role: Int!

  """0: Unknow | 1: Male | 2: Female"""
  gender: Int!
  is_valid_email: Int!
  faceRecognitionModel: String
  secret_key: String
  userTokens: [UserToken!]!
  questionActions: [UserQuestionAction!]!
  answerActions: [UserAnswerAction!]!
  questions: [Question!]!
  answers: [Answer!]!
  images: [Image!]!
  groups: GroupMember!
}

type LoginResponseType {
  access_token: String!
  access_token_expire_time: String!
  refresh_token: String!
  refresh_token_expire_time: String!
  user: User!
}

type PageData {
  count: Float!
  limit: Float!
  offset: Float!
}

type TagResponse {
  page: TagConnection!
  pageData: PageData
}

type TagConnection {
  edges: [TagEdge!]
  pageInfo: TagPageInfo
}

type TagEdge {
  cursor: String
  node: Tag
}

type TagPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean
  hasNextPage: Boolean
}

type QuestionResponse {
  page: QuestionConnection!
  pageData: PageData
}

type QuestionConnection {
  edges: [QuestionEdge!]
  pageInfo: QuestionPageInfo
}

type QuestionEdge {
  cursor: String
  node: Question
}

type QuestionPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean
  hasNextPage: Boolean
}

type AnswerResponse {
  page: AnswerConnection!
  pageData: PageData
}

type AnswerConnection {
  edges: [AnswerEdge!]
  pageInfo: AnswerPageInfo
}

type AnswerEdge {
  cursor: String
  node: Answer
}

type AnswerPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean
  hasNextPage: Boolean
}

type ImageResponseType {
  uploadFile: Boolean!
  name: String!
  image: Image!
}

type GroupMemberResponse {
  page: GroupMemberConnection!
  pageData: PageData
}

type GroupMemberConnection {
  edges: [GroupMemberEdge!]
  pageInfo: GroupMemberPageInfo
}

type GroupMemberEdge {
  cursor: String
  node: GroupMember
}

type GroupMemberPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean
  hasNextPage: Boolean
}

type GroupAttendanceResponse {
  page: GroupAttendanceConnection!
  pageData: PageData
}

type GroupAttendanceConnection {
  edges: [GroupAttendanceEdge!]
  pageInfo: GroupAttendancePageInfo
}

type GroupAttendanceEdge {
  cursor: String
  node: GroupAttendance
}

type GroupAttendancePageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean
  hasNextPage: Boolean
}

type GroupBoardResponse {
  page: GroupBoardConnection!
  pageData: PageData
}

type GroupBoardConnection {
  edges: [GroupBoardEdge!]
  pageInfo: GroupBoardPageInfo
}

type GroupBoardEdge {
  cursor: String
  node: GroupBoard
}

type GroupBoardPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean
  hasNextPage: Boolean
}

type Query {
  users: [User!]!
  tags(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): TagResponse!
  questions(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): QuestionResponse!

  """Find all answers by question id"""
  answers(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    questionId: ID!
  ): AnswerResponse!
  files: [Image!]!
  file(id: String!): Image!
  groupMembers(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): GroupMemberResponse!
  groupAttendances(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float

    """Start time of search"""
    startTime: String

    """End time of search"""
    endTime: String
  ): GroupAttendanceResponse!
  groupBoards(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    groupId: String!
  ): GroupBoardResponse!
}

type Mutation {
  """User login"""
  login(loginInput: LoginInput!): LoginResponseType!

  """User register"""
  signup(createUserInput: CreateUserInput!): User!

  """Refresh Token"""
  refreshToken(refreshToken: String!): LoginResponseType!

  """Log out"""
  logout(userId: String!): Boolean!

  """Create tag"""
  createTag(createTagInput: CreateTagInput!): Tag!

  """Create new question"""
  createQuestion(createQuestionInput: CreateQuestionInput!): Question!

  """actionType: 0: NOTHING | 1: LIKE | 2: DISLIKE"""
  reactQuestion(reactionInput: ReactionQuestionInput!): UserQuestionAction!
  createAnswer(createAnswerInput: CreateAnswerInput!): Answer!

  """actionType: 0: NOTHING | 1: LIKE | 2: DISLIKE"""
  reactAnswer(reactionInput: ReactionAnswerInput!): UserAnswerAction!

  """Example upload single file"""
  uploadFile(file: Upload, imageInfor: CreateImageInput!): ImageResponseType!

  """Save file path"""
  createFile(createFileInput: CreateImageInput!): Image!

  """Update file path"""
  updateFile(updateFileInput: UpdateImageInput!): Image!

  """Delete file"""
  removeFile(id: String!): Image!

  """Create group"""
  createGroup(createGroupInput: CreateGroupInput!): Group!

  """Create group member"""
  createGroupMember(createGroupMemberInput: CreateGroupMemberInput!): GroupMember!

  """Update group member role"""
  updateGroupMemberRole(updateGroupMemberRoleInput: UpdateGroupMemberRoleInput!): GroupMember!

  """Soft remove group member"""
  removeGroupMember(groupMemberId: String!): GroupMember!

  """create class attendance with evidence"""
  createAttendance(createAttendanceInput: CreateAttendanceInput!): GroupAttendance!

  """Create group board"""
  createGroupBoard(createGroupBoardInput: CreateGroupBoardInput!): GroupBoard!

  """Update group board"""
  updateGroupBoard(updateGroupBoardInput: UpdateGroupBoardInput!): GroupBoard!

  """Create group column"""
  createGroupColumn(createGroupColumnInput: CreateGroupColumnInput!): GroupColumn!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateUserInput {
  fullName: String!
  email: String!
  password: String!
}

input CreateTagInput {
  name: String!
  logo: String!
  description: String!
}

input CreateQuestionInput {
  createUserId: String!
  title: String!
  content: String!
  githubLink: String!
  isHidden: String = "0"
  tags: [String!]!
}

input ReactionQuestionInput {
  userId: String!
  questionId: String!
  actionType: Int!
}

input CreateAnswerInput {
  content: String!
  documentLink: String
  createUserId: String!
  questionId: String!
  answerId: String
}

input ReactionAnswerInput {
  userId: String!
  answerId: String!
  actionType: Int!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateImageInput {
  name: String!
  alt: String!
  urlLink: String
  description: String
  blurHash: String
  createUserId: ID!
}

input UpdateImageInput {
  name: String
  alt: String
  urlLink: String
  description: String
  blurHash: String
  createUserId: ID
  id: String!
}

input CreateGroupInput {
  courseId: String
  name: String!
  imageUrl: String
  logo: String!
  meetingLink: String!
  subMeetingLink: String
}

input CreateGroupMemberInput {
  groupId: String!
  userId: String!

  """format example: 2011-10-05T14:48:00.000Z"""
  joinDate: String!
}

input UpdateGroupMemberRoleInput {
  id: String!

  """0: ADMIN | 1: SUBADMIN | 2: MEMBER"""
  role: Int!
}

input CreateAttendanceInput {
  memberId: String!
  groupId: String!

  """format example: 2011-10-05T14:48:00.000Z"""
  time: String!
  status: Int!
  evidence: String!
}

input CreateGroupBoardInput {
  groupId: String!
  title: String!
  color: String!
}

input UpdateGroupBoardInput {
  id: String!
  title: String!
  color: String!
}

input CreateGroupColumnInput {
  boardId: String!
  title: String!
}